{"remainingRequest":"D:\\mine\\targetList\\targetList\\node_modules\\babel-loader\\lib\\index.js!D:\\mine\\targetList\\targetList\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\mine\\targetList\\targetList\\src\\api\\interceptors.js","dependencies":[{"path":"D:\\mine\\targetList\\targetList\\src\\api\\interceptors.js","mtime":1547287641800},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\n/*创建axios实例对象*/\n\nvar ajax = axios.create({\n  baseURL: ajaxUrl,\n  timeout: 30000\n});\n/*请求拦截器（请求之前的操作）*/\n\najax.interceptors.request.use(function (config) {\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); // 请求后的操作\n\najax.interceptors.response.use(function (config) {\n  console.log('aa', config);\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); // 导出模块\n\nexport default ajax;\nmodule.exports;\n接口拦截; // import axios from 'axios';\n// // 默认配置\n// axios.defaults.baseURL = 'http://118.24.156.129/'; \n// // axios.defaults.headers.post['Content-Type'] = 'application/json';\n// export const request = (config) => {\n//   return axios(config);\n// };\n// // http request 拦截器\n// axios.interceptors.request.use(\n//   (config) => {  //post请求成功\n//       if(config.data.content){\n//           return config\n//       }else {\n//           throw new Error('提交失败');\n//       }\n//   },\n//   (err) => {\n//     return Promise.reject(err);\n//   }\n// );\n// // http response 拦截器\n// axios.interceptors.response.use(\n//   (response) => {\n//       if(response.data.code==20000){\n//         return response;\n//       } else {\n//           throw new Error('请求异常', response.data.msg);\n//       }\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );",{"version":3,"sources":["D:\\mine\\targetList\\targetList\\src\\api\\interceptors.js"],"names":["axios","ajax","create","baseURL","ajaxUrl","timeout","interceptors","request","use","config","err","Promise","reject","response","console","log","module","exports","接口拦截"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA,IAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAa;AACtBC,EAAAA,OAAO,EAAEC,OADa;AAEtBC,EAAAA,OAAO,EAAE;AAFa,CAAb,CAAb;AAKA;;AACAJ,IAAI,CAACK,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CACI,UAAAC,MAAM,EAAI;AACN,SAAOA,MAAP;AACH,CAHL,EAII,UAAAC,GAAG,EAAI;AACH,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CANL,E,CAQA;;AACAT,IAAI,CAACK,YAAL,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACrCK,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBN,MAAjB;AACA,SAAOA,MAAP;AACH,CAHD,EAGG,UAAAC,GAAG,EAAE;AACJ,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CALD,E,CAMA;;AACA,eAAeT,IAAf;AACAe,MAAM,CAACC,OAAP;AAGAC,IAAI,C,CACJ;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios'\r\n/*创建axios实例对象*/\r\nconst ajax = axios.create({\r\n    baseURL: ajaxUrl,\r\n    timeout: 30000\r\n});\r\n\r\n/*请求拦截器（请求之前的操作）*/\r\najax.interceptors.request.use(\r\n    config => {\r\n        return config\r\n    },\r\n    err => {\r\n        return Promise.reject(err)\r\n    }\r\n)\r\n// 请求后的操作\r\najax.interceptors.response.use(config => {\r\n    console.log('aa',config);\r\n    return config;\r\n}, err=>{\r\n    return Promise.reject(err);\r\n})\r\n// 导出模块\r\nexport default ajax;\r\nmodule.exports\r\n\r\n\r\n接口拦截 \r\n// import axios from 'axios';\r\n\r\n\r\n// // 默认配置\r\n// axios.defaults.baseURL = 'http://118.24.156.129/'; \r\n// // axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n// export const request = (config) => {\r\n//   return axios(config);\r\n// };\r\n\r\n// // http request 拦截器\r\n// axios.interceptors.request.use(\r\n//   (config) => {  //post请求成功\r\n//       if(config.data.content){\r\n//           return config\r\n//       }else {\r\n//           throw new Error('提交失败');\r\n//       }\r\n//   },\r\n//   (err) => {\r\n//     return Promise.reject(err);\r\n//   }\r\n// );\r\n\r\n// // http response 拦截器\r\n// axios.interceptors.response.use(\r\n//   (response) => {\r\n//       if(response.data.code==20000){\r\n//         return response;\r\n//       } else {\r\n//           throw new Error('请求异常', response.data.msg);\r\n//       }\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );"]}]}