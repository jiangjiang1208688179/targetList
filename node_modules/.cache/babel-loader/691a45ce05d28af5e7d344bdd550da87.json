{"remainingRequest":"D:\\mine\\targetList\\targetList\\node_modules\\babel-loader\\lib\\index.js!D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\mine\\targetList\\targetList\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\mine\\targetList\\targetList\\src\\views\\Table-2.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\mine\\targetList\\targetList\\src\\views\\Table-2.vue","mtime":1550560225841},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _slicedToArray from \"D:\\\\mine\\\\targetList\\\\targetList\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport tableList from \"../assets/tableInfor.js\";\nexport default {\n  name: \"table-2\",\n  data: function data() {\n    return {\n      tableList: [],\n      //存储从后台请求到的所有数据\n      tableList1: [],\n      //保存从后台请求到的最原始的数据,主要是为了后边查询搜索关键字的变动\n      totall: 0,\n      //统计后台请求数据的总条数\n      pageSize: 15,\n      //每页显示的数据条数\n      currentPage: 1,\n      //当先显示的分页面，默认为1\n      currentPageList: [],\n      //存放当前页面的所有数据\n      options: [{\n        value: 0,\n        label: '所有'\n      }, {\n        value: 1,\n        label: '姓名'\n      }, {\n        value: 2,\n        label: '出生日期'\n      }, {\n        value: 3,\n        label: '地址'\n      }],\n      classValue: '',\n      //该变量来控制options中选的是那个，好进行排序\n      searchKey: '',\n      searchRes: true\n    };\n  },\n  methods: {\n    getCurrectPageList: function getCurrectPageList(page) {\n      //page是从1开始的 \n      //通过slice(start,end)方法返回新的数组列表，start以下标0开始\n      var start = (page - 1) * this.pageSize;\n      var end; //结束有几种情况：1、该页是满的；2、该页未满\n\n      this.totall = this.tableList.length;\n\n      if (this.tableList.length >= start + this.pageSize) {\n        end = start + this.pageSize;\n      } else {\n        end = this.tableList.length;\n      }\n\n      this.currentPageList = this.tableList.slice(start, end);\n    },\n    getFormInfor: function getFormInfor() {\n      this.tableList = tableList.list;\n      this.tableList1 = tableList.list;\n      this.totall = this.tableList.length;\n    },\n    getNullTableList: function getNullTableList() {\n      this.tableList = [];\n    },\n    handleCurrectPage: function handleCurrectPage(val) {\n      //var会获取当前点击的页数\n      this.currentPage = val;\n      this.getCurrectPageList(val);\n    },\n    handleClass: function handleClass(key) {\n      //返回下拉列表的value值，此处是0、1、2、3\n      console.log(key);\n    },\n    handleSearch: function handleSearch() {\n      //此方法遍历查询    this.classValue :按照什么分类查(0-3 || null)  this.searchKey：查询某个关键字\n      //分 \n      var orderList = ['all', 'name', 'date', 'address'];\n      console.log(this.classValue);\n\n      if (this.searchKey) {\n        this.getNullTableList();\n      } // else if(!this.searchKey && this.classValue == 0){  //这一步会死机\n      //     this.tableList = this.tableList1;\n      //     console.log(this.tableList);\n      // }\n      else if (!this.searchKey && this.classValue == '') {\n          this.$message.warning(\"查询条件不能为空！\");\n          return;\n        }\n\n      if (this.classValue == 0 || this.classValue == '') {\n        //  按照所有的排序,多次循环，先按照name，再按照date，再按照address\n        var arr = [];\n\n        for (var i = 1; i < orderList.length; i++) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = this.tableList1.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _step$value = _slicedToArray(_step.value, 2),\n                  index = _step$value[0],\n                  item = _step$value[1];\n\n              if (item[orderList[i]].includes(this.searchKey)) {\n                if (!arr.includes(index)) {\n                  arr.push(index);\n                  this.tableList.push(item);\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      } else {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.tableList1[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n\n            //按照 name date address三种分类\n            if (item[orderList[this.classValue]].includes(this.searchKey)) {\n              this.tableList.push(item);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      this.getCurrectPageList(1);\n      console.log(this.tableList);\n    }\n  },\n  mounted: function mounted() {\n    this.getFormInfor();\n    this.getCurrectPageList(this.currentPage);\n  }\n};",{"version":3,"sources":["Table-2.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"tableFilter\">\r\n            <div class=\"class1\">\r\n                <span>按类别排序:</span>\r\n                <el-select v-model=\"classValue\" filterable no-match-text placeholder=\"请选择\" @change=\"handleClass\">\r\n                    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n            </div>\r\n            <div class=\"search\">\r\n                 <!--@keyup.enter在el-input,el-button标签中是会失效的，但是在button和input标签中是可以的，所以在el-input标签中要用@keyup.enter.native-->\r\n                <el-input v-model=\"searchKey\" placeholder=\"请输入搜索关键字\" @keyup.enter.native=\"handleSearch()\">\r\n                    <i slot=\"suffix\" class=\"el-input__icon el-icon-search\" @click=\"handleSearch()\"></i>\r\n                </el-input>\r\n            </div>\r\n        </div>\r\n        <el-table id='tableId' :data=\"currentPageList\" border style=\"width:100%;margin-top:50px\">\r\n            <el-table-column prop=\"name\" label=\"姓名\" sortable width=\"200\" v-show=\"searchRes\"></el-table-column>\r\n            <el-table-column prop=\"date\" label=\"出生日期\" sortable width=\"250\" v-show=\"searchRes\"></el-table-column>\r\n            <el-table-column prop=\"address\" sortable label=\"地址\" v-show=\"searchRes\"></el-table-column>\r\n        </el-table>\r\n        <el-pagination background layout=\"prev, pager, next\" :page-size=\"pageSize\" :total=\"totall\" @current-change=\"handleCurrectPage\"></el-pagination>\r\n    </div>\r\n</template>\r\n<script>\r\nimport tableList from \"../assets/tableInfor.js\";\r\nexport default {\r\n  name: \"table-2\",\r\n  data() {\r\n    return {\r\n      tableList: [], //存储从后台请求到的所有数据\r\n      tableList1: [], //保存从后台请求到的最原始的数据,主要是为了后边查询搜索关键字的变动\r\n      totall: 0, //统计后台请求数据的总条数\r\n      pageSize: 15, //每页显示的数据条数\r\n      currentPage: 1, //当先显示的分页面，默认为1\r\n      currentPageList: [], //存放当前页面的所有数据\r\n\r\n      options: [\r\n        {\r\n            value:0,\r\n            label: '所有'\r\n        },{\r\n            value: 1,\r\n            label: '姓名'\r\n        },\r\n        {\r\n            value: 2,\r\n            label: '出生日期'\r\n        },\r\n        {\r\n            value:3,\r\n            label: '地址'\r\n        }],\r\n        classValue: '',  //该变量来控制options中选的是那个，好进行排序\r\n        searchKey: '',\r\n        searchRes: true\r\n    };\r\n  },\r\n  methods: {\r\n    getCurrectPageList(page) { //page是从1开始的 \r\n      //通过slice(start,end)方法返回新的数组列表，start以下标0开始\r\n      var start = (page - 1) * this.pageSize;\r\n      var end; //结束有几种情况：1、该页是满的；2、该页未满\r\n      this.totall = this.tableList.length;\r\n      if (this.tableList.length >= start + this.pageSize) {\r\n        end = start + this.pageSize;\r\n      } else{\r\n          end = this.tableList.length;\r\n      }\r\n      this.currentPageList = this.tableList.slice(start, end);\r\n    },\r\n    getFormInfor() {\r\n      this.tableList = tableList.list;\r\n      this.tableList1 = tableList.list;\r\n      this.totall = this.tableList.length;\r\n    },\r\n    getNullTableList(){\r\n        this.tableList = [];\r\n    },\r\n    handleCurrectPage(val) {\r\n      //var会获取当前点击的页数\r\n      this.currentPage = val;\r\n      this.getCurrectPageList(val);\r\n    },\r\n    handleClass(key){ //返回下拉列表的value值，此处是0、1、2、3\r\n        console.log(key)\r\n    },\r\n    handleSearch(){  //此方法遍历查询    this.classValue :按照什么分类查(0-3 || null)  this.searchKey：查询某个关键字\r\n    //分 \r\n        var orderList = ['all','name','date', 'address']\r\n        console.log(this.classValue);\r\n        if(this.searchKey){\r\n            this.getNullTableList();\r\n        }\r\n        // else if(!this.searchKey && this.classValue == 0){  //这一步会死机\r\n        //     this.tableList = this.tableList1;\r\n        //     console.log(this.tableList);\r\n        // }\r\n        else if(!this.searchKey && this.classValue == ''){\r\n            this.$message.warning(\"查询条件不能为空！\");\r\n            return;\r\n        }\r\n        if (this.classValue==0 || this.classValue == ''){\r\n            //  按照所有的排序,多次循环，先按照name，再按照date，再按照address\r\n            let arr = [];\r\n            for (let i=1; i<orderList.length; i++){\r\n                for( let [index, item] of this.tableList1.entries()){ \r\n                    if(item[orderList[i]].includes(this.searchKey)){\r\n                        if (!arr.includes(index)){\r\n                            arr.push(index);\r\n                            this.tableList.push(item);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else{\r\n            for(let item of this.tableList1){  //按照 name date address三种分类\r\n                if(item[orderList[this.classValue]].includes(this.searchKey)){\r\n                    this.tableList.push(item);\r\n                }\r\n            }\r\n        }\r\n        this.getCurrectPageList(1);\r\n        console.log(this.tableList);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getFormInfor();\r\n    this.getCurrectPageList(this.currentPage);\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.tableFilter {\r\n  width: 100%;\r\n  height: 10px;\r\n}\r\n.tableFilter div{\r\n    display: inline-block;\r\n    margin-left: 10px;\r\n    margin-right:10px;\r\n}\r\n.searchImg{\r\n    width: 32px;\r\n    height: 32px;\r\n    margin-right: 5px;\r\n}\r\n.search i{\r\n    cursor: pointer;\r\n}\r\n</style>"],"sourceRoot":"src\\views"}]}