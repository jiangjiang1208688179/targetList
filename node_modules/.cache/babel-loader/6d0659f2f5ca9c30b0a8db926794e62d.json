{"remainingRequest":"D:\\mine\\targetList\\targetList\\node_modules\\babel-loader\\lib\\index.js!D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\mine\\targetList\\targetList\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\mine\\targetList\\targetList\\src\\components\\alreadyTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\mine\\targetList\\targetList\\src\\components\\alreadyTask.vue","mtime":1548324095185},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mine\\targetList\\targetList\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport { getTasks } from \"@/api/apis\";\nexport default {\n  name: \"alreadyTask\",\n  props: [\"dateTarget\"],\n  //dateTarget的数据类型是: [{ date: 1545099084455, name: \"a1\" }]\n  data: function data() {\n    return {\n      alreadyList: {},\n      dateTarget1: []\n    };\n  },\n  methods: {\n    transDate: function transDate(n) {\n      //日期格式转换\n      var date1 = {},\n          d = new Date(n),\n          date = [];\n      date[0] = d.getFullYear();\n      date[1] = d.getMonth() + 1;\n      date[2] = d.getDate();\n      date1.date = date.join(\"-\");\n      date1.ww = this.getWW(d.getDay() + 1); //将数字转换成星期一、星期二...\n\n      return date1; //返回一个对象，包含具体哪一天，以及周几\n    },\n    getWW: function getWW(n) {\n      switch (n) {\n        case 1:\n          return \"星期一\";\n        // break;\n\n        case 2:\n          return \"星期二\";\n        // break;\n\n        case 3:\n          return \"星期三\";\n        // break;\n\n        case 4:\n          return \"星期四\";\n        // break;\n\n        case 5:\n          return \"星期五\";\n        // break;\n\n        case 6:\n          return \"星期六\";\n        // break;\n\n        case 7:\n          return \"星期日\";\n        // break;\n      }\n    },\n    mapAlreadyDate: function mapAlreadyDate(arr) {\n      var _this = this;\n\n      var newArr = []; //按天存储,哪一天完成了什么内容,最终显示的数据结构\n      // [{date:{date:2018-12-12,ww:'星期一'},name:[target1,target2]}]\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          date = _step.value;\n\n          var date1 = _this.transDate(date.complete_time); //date1有两个参数，一个date:2018-12-12，一个ww:星期几\n\n\n          var index = -1;\n          var alreadyExists = newArr.some(function (newDate, j) {\n            // console.log(date1.date, newDate.date.date);\n            if (date1.date === newDate.date.date) {\n              //此处注意条件的判断\n              index = j;\n              return true;\n            }\n          });\n\n          if (!alreadyExists) {\n            newArr.push({\n              date: date1,\n              name: [date.content]\n            });\n          } else {\n            newArr[index].name.push(date.content);\n          }\n        };\n\n        for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var date;\n\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return newArr;\n    },\n    alreadylist: function alreadylist() {\n      var _this2 = this;\n\n      getTasks(true).then(function (res) {\n        _this2.dateTarget1 = res.data; // console.log('RES:',res.data.data);\n        // this.dateTarget1 = this[\"dateTarget1\"].concat(this.dateTarget); //concat()拼接数据不是把拼接的数组直接赋给前边数组  而是返回一个新的连接后的数组，所以需要赋值；\n\n        _this2.alreadyList = _this2.mapAlreadyDate(_this2.dateTarget1);\n      });\n    }\n  },\n  watch: {\n    dateTarget: function dateTarget(val) {\n      this.alreadylist(); // this.alreadyList = this.mapAlreadyDate(this.dateTarget);\n    }\n  },\n  mounted: function mounted() {\n    this.alreadylist(); // console.log(this.dateTarget1);\n  }\n};",{"version":3,"sources":["alreadyTask.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"alreadyTarg\">\r\n    <h3>已完成的任务</h3>\r\n    <!-- <div>{{dateTarget}}</div> -->\r\n    <div v-for=\"(item, index) in alreadyList\" v-bind:key=\"index\">\r\n      <div class=\"alreadyItem\">\r\n        <div class=\"completeDate\">\r\n          <div>{{item.date.date}}</div>\r\n          <div class=\"ww\">{{item.date.ww}}</div>\r\n        </div>\r\n        <div class=\"completeItem\">\r\n          <div v-for=\"(item1, index1) in item.name\" v-bind:key=\"index1\">{{item1}}</div>\r\n        </div>\r\n      </div>\r\n      <div style=\"display:block;width:90%;height:2px;background-color:#f5f5f5;margin-left:5%;margin-right:5%;margin-top:20px;\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from \"axios\";\r\nimport {getTasks} from \"@/api/apis\"\r\nexport default {\r\n  name: \"alreadyTask\",\r\n  props: [\"dateTarget\"], //dateTarget的数据类型是: [{ date: 1545099084455, name: \"a1\" }]\r\n  data() {\r\n    return {\r\n      alreadyList: {},\r\n      dateTarget1: []\r\n    };\r\n  },\r\n  methods: {\r\n    transDate(n) {\r\n      //日期格式转换\r\n      var date1 = {},\r\n        d = new Date(n),\r\n        date = [];\r\n\r\n      date[0] = d.getFullYear();\r\n      date[1] = d.getMonth() + 1;\r\n      date[2] = d.getDate();\r\n      date1.date = date.join(\"-\");\r\n      date1.ww = this.getWW(d.getDay() + 1); //将数字转换成星期一、星期二...\r\n      return date1; //返回一个对象，包含具体哪一天，以及周几\r\n    },\r\n    getWW(n) {\r\n      switch (n) {\r\n        case 1:\r\n          return \"星期一\";\r\n          // break;\r\n        case 2:\r\n          return \"星期二\";\r\n          // break;\r\n        case 3:\r\n          return \"星期三\";\r\n          // break;\r\n        case 4:\r\n          return \"星期四\";\r\n          // break;\r\n        case 5:\r\n          return \"星期五\";\r\n          // break;\r\n        case 6:\r\n          return \"星期六\";\r\n          // break;\r\n        case 7:\r\n          return \"星期日\";\r\n          // break;\r\n      }\r\n    },\r\n    mapAlreadyDate(arr) {\r\n      let newArr = []; //按天存储,哪一天完成了什么内容,最终显示的数据结构\r\n      // [{date:{date:2018-12-12,ww:'星期一'},name:[target1,target2]}]\r\n      for (var date of arr) {\r\n        let date1 = this.transDate(date.complete_time); //date1有两个参数，一个date:2018-12-12，一个ww:星期几\r\n        let index = -1;\r\n        let alreadyExists = newArr.some((newDate, j) => {\r\n          // console.log(date1.date, newDate.date.date);\r\n          if (date1.date === newDate.date.date) {\r\n            //此处注意条件的判断\r\n            index = j;\r\n            return true;\r\n          }\r\n        });\r\n        if (!alreadyExists) {\r\n          newArr.push({\r\n            date: date1,\r\n            name: [date.content]\r\n          });\r\n        } else {\r\n          newArr[index].name.push(date.content);\r\n        }\r\n      }\r\n      return newArr;\r\n    },\r\n    alreadylist() {\r\n      getTasks(true).then(res => {\r\n        this.dateTarget1 = res.data;\r\n        // console.log('RES:',res.data.data);\r\n        // this.dateTarget1 = this[\"dateTarget1\"].concat(this.dateTarget); //concat()拼接数据不是把拼接的数组直接赋给前边数组  而是返回一个新的连接后的数组，所以需要赋值；\r\n        this.alreadyList = this.mapAlreadyDate(this.dateTarget1);\r\n      });\r\n    }\r\n  },\r\n  watch: {\r\n    dateTarget: function(val) {\r\n      this.alreadylist();\r\n      // this.alreadyList = this.mapAlreadyDate(this.dateTarget);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.alreadylist();\r\n    // console.log(this.dateTarget1);\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.alreadyTarg {\r\n  margin-left: 20%;\r\n  margin-right: 20%;\r\n  background-color: white;\r\n  width: 60%;\r\n  height: 70%;\r\n  box-shadow: 0px 0px 2px 5px #f8f4e3;\r\n  border-radius: 5px;\r\n}\r\n.alreadyItem {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin-top: 15px;\r\n  /* border-bottom: 1px solid #ccc; */\r\n}\r\n.alreadyItem div {\r\n  display: inline-block;\r\n}\r\n.completeDate {\r\n  width: 300px;\r\n}\r\n.ww {\r\n  font-size: 12px;\r\n  padding-left: 0px;\r\n  color: #ccc;\r\n}\r\n.completeDate div {\r\n  padding: 10px;\r\n}\r\n.completeItem {\r\n  text-align: left;\r\n  margin-top: 15px;\r\n  width: 300px;\r\n}\r\n.completeItem div {\r\n  padding: 5px;\r\n  display: block;\r\n}\r\n.completeDateWw {\r\n  color: #ccc;\r\n}\r\n</style>\r\n"],"sourceRoot":"src\\components"}]}